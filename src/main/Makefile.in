#
# ${R_HOME}/src/main/Makefile

VPATH = @srcdir@
srcdir = @srcdir@
top_srcdir = @top_srcdir@

top_builddir = ../..
subdir = src/main
# next is needed for shared BLAS
R_HOME=$(top_builddir)

include $(top_builddir)/Makeconf

SOURCES_C = RNG.c complex.c gram.c inlined.c regex.c

SOURCES_CXX = \
	CConverters.cpp CellPool.cpp Closure.cpp CommandLineArgs.cpp \
	ComplexVector.cpp \
	Environment.cpp ExpressionVector.cpp \
        FlagWord.cpp \
        GCManager.cpp GCNode.cpp GCRoot.cpp \
        Heap.cpp \
        IntVector.cpp InternalFunction.cpp \
	ListVector.cpp LogicalVector.cpp \
        PairList.cpp Promise.cpp \
        RAllocStack.cpp RObject.cpp RawVector.cpp Rdynload.cpp RealVector.cpp \
        Renviron.cpp \
        String.cpp Symbol.cpp \
        VectorBase.cpp \
        WeakRef.cpp \
	apply.cpp arithmetic.cpp apse.cpp array.cpp attrib.cpp \
	base.cpp bind.cpp builtin.cpp \
	character.cpp coerce.cpp colors.cpp connections.cpp context.cpp \
	cov.cpp cum.cpp \
	dcf.cpp datetime.cpp debug.cpp deparse.cpp deriv.cpp \
	dotcode.cpp dounzip.cpp dstruct.cpp duplicate.cpp \
	engine.cpp envir.cpp errors.cpp eval.cpp \
	format.cpp fourier.cpp \
	gevents.cpp gram-ex.cpp graphics.cpp \
	identical.cpp internet.cpp iosupport.cpp \
	lapack.cpp list.cpp localecharset.cpp logic.cpp \
	main.cpp mapply.cpp match.cpp memory.cpp model.cpp \
	names.cpp objects.cpp optim.cpp optimize.cpp options.cpp \
	par.cpp paste.cpp pcre.cpp platform.cpp \
	plot.cpp plot3d.cpp plotmath.cpp \
	print.cpp printarray.cpp printvector.cpp printutils.cpp qsort.cpp \
	random.cpp registration.cpp relop.cpp rlocale.cpp \
	saveload.cpp scan.cpp seq.cpp serialize.cpp size.cpp sort.cpp \
        source.cpp split.cpp sprintf.cpp startup.cpp subassign.cpp \
        subscript.cpp subset.cpp summary.cpp sysutils.cpp \
	unique.cpp util.cpp \
	version.cpp vfonts.cpp
SOURCES_F = \
	xxxpr.f

## If the substitutes are needed, the corresponding objects are put by
## configure in @LIBOBJS@ @ALLOCA@
EXTRA_SOURCES_CXX = \
	Rmain.cpp \
	alloca.cpp acosh.cpp asinh.cpp atanh.cpp \
	mkdtemp.cpp \
	snprintf.cpp strdup.cpp strncasecmp.cpp \
	vsnprintf.cpp xspline.cpp

SAN_SOURCES_C = \
        ClosureC.c  EnvironmentC.c  InternalFunctionC.c  PairListC.c  \
        PromiseC.c  SymbolC.c  VectorC.c

DEPENDS = $(SOURCES_C:.c=.d) $(SOURCES_CXX:.cpp=.d) \
          $(EXTRA_SOURCES_CXX:.cpp=.d)
SOURCES = $(SOURCES_C) $(SOURCES_CXX) $(SOURCES_F)
OBJECTS = $(SOURCES_C:.c=.o) $(SOURCES_CXX:.cpp=.o) $(SOURCES_F:.f=.o) \
          @LIBOBJS@ @ALLOCA@
HEADERS = \
	RBufferUtils.h Rregex.h Rstrptime.h \
	arithmetic.h apse.h \
	basedecl.h \
	par-common.c \
	qsort-body.c \
	rlocale_data.h \
	unzip.h

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
DISTFILES = Makefile.in Makefile.win \
	$(HEADERS) \
        $(SOURCES_C) \
	$(SOURCES_CXX) \
	$(EXTRA_SOURCES_CXX) \
	$(SOURCES_F) \
	gram.y

ZLIB_CPPFLAGS = @BUILD_ZLIB_TRUE@ -I$(top_srcdir)/src/extra/zlib
BZLIB_CPPFLAGS = @BUILD_BZLIB_TRUE@ -I$(top_srcdir)/src/extra/bzip2
PCRE_CPPFLAGS = @BUILD_PCRE_TRUE@ -I$(top_srcdir)/src/extra/pcre
XDR_CPPFLAGS = @BUILD_XDR_TRUE@ -I$(top_srcdir)/src/extra/xdr

ALL_CPPFLAGS = $(ZLIB_CPPFLAGS) $(BZLIB_CPPFLAGS) $(PCRE_CPPFLAGS) \
  $(XDR_CPPFLAGS) $(R_XTRA_CPPFLAGS) $(CPPFLAGS) $(DEFS)
@WANT_R_SHLIB_TRUE@ALL_CFLAGS = $(ALL_CFLAGS_LO)
@WANT_R_SHLIB_TRUE@ALL_FFLAGS = $(ALL_FFLAGS_LO)


## use an explicit library: there might be an unsatisfactory -lz around
R_ZLIBS = @BUILD_ZLIB_TRUE@ ../extra/zlib/libz.a
R_BZLIBS = @BUILD_BZLIB_TRUE@ ../extra/bzip2/libbz2.a
R_PCRE = @BUILD_PCRE_TRUE@ ../extra/pcre/libpcre.a
R_XDR = @BUILD_XDR_TRUE@ ../extra/xdr/libxdr.a

## <FIXME>
## Names in here should use '$(top_builddir)' instead ...
RLIBS = ../unix/libunix.a ../appl/libappl.a ../nmath/libnmath.a
## </FIXME>

EXTRA_LIBS = $(BLAS_LIBS) $(FLIBS) $(R_XTRA_LIBS) $(R_ZLIBS) \
	$(R_BZLIBS) $(R_PCRE) $(R_XDR) @LIBINTL@\
	$(READLINE_LIBS) $(LIBS)

## find dependencies for both libR and standalone R.bin
DEP_LIBINTL = @BUILD_LIBINTL_TRUE@ ../extra/intl/libintl.a
COMMON_DEPENDENCIES = \
	$(R_ZLIBS) $(R_BZLIBS) $(R_PCRE) $(R_XDR) $(DEP_LIBINTL)

R_binary = R.bin
R_bin_OBJECTS = Rmain.o @WANT_R_SHLIB_FALSE@$(OBJECTS)
@WANT_R_SHLIB_FALSE@R_bin_LDADD = $(RLIBS) $(EXTRA_LIBS)
@WANT_R_SHLIB_TRUE@R_bin_LDADD = -L../../lib@R_ARCH@ -lR @BLAS_SHLIB_TRUE@-lRblas
R_bin_DEPENDENCIES =@WANT_R_SHLIB_FALSE@ $(RLIBS) $(COMMON_DEPENDENCIES)

libR_la = libR$(DYLIB_EXT)
libR_la_OBJECTS = $(OBJECTS)
## <FIXME>
## This should also have `ls ../appl/*.lo ../nmath/*.lo ../unix/*.lo`, but
## of course this will not work when the files do not exist yet :-)
libR_la_LIBADD = $(EXTRA_LIBS)
libR_la_DEPENDENCIES = ../appl/stamp-lo ../nmath/stamp-lo ../unix/stamp-lo \
	 $(COMMON_DEPENDENCIES)
## </FIXME>

## The next is needed on darwin only at present
LIBR_LDFLAGS = @LIBR_LDFLAGS@

all: Makefile Makedeps R

Makefile: $(srcdir)/Makefile.in \
  $(top_builddir)/config.status \
  ../include/config.h \
  ../include/Rversion.h \
  $(SOURCES_C) $(SOURCES_CXX) $(EXTRA_SOURCES_CXX)
	@cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

Makedeps: Makefile $(DEPENDS)
	@touch $@

## This target has been changed to ensure that R.bin and libR get
## installed in the build tree if necessary, even if the corresponding 
## objects are not re-made.
## Note that dependencies in the test Makefiles depend on these objects,
## so copy-if-change is used.
R: Makefile
	@$(MAKE) Makedeps
@WANT_R_SHLIB_TRUE@	@$(MAKE) install-lib-local
	@$(MAKE) install-bin-local


## is this portable?  Documented as GNU extension.
../include/config.h ../include/Rversion.h:
	(cd $(@D); $(MAKE) $(@F))

$(R_binary): $(R_bin_OBJECTS) $(R_bin_DEPENDENCIES) @USE_EXPORTFILES_TRUE@ $(top_builddir)/etc/R.exp
	$(LINK.cpp) $(MAIN_LDFLAGS) -o $@ $(R_bin_OBJECTS) $(R_bin_LDADD)
#	$(MAIN_LINK) -o $@ $(R_bin_OBJECTS) $(R_bin_LDADD)

install-bin-local: $(R_binary)
	@$(MAKE) rhome="$(abs_top_builddir)" install-bin

$(top_builddir)/etc/R.exp: $(OBJECTS) $(RLIBS)
	@$(SHELL) $(top_srcdir)/tools/ldAIX4 -o $@ $(OBJECTS) $(RLIBS)

C-sanity-check : $(SAN_SOURCES_C:.c=.o)

## is this portable?  Documented as GNU extension.
$(RLIBS):
	(cd $(@D); $(MAKE) $(@F))

../extra/bzip2/libbz2.a ../extra/pcre/libpcre.a ../extra/xdr/libxdr.a ../extra/zlib/libz.a ../extra/intl/libintl.a:
	(cd $(@D); $(MAKE))


libR: $(libR_la)

$(libR_la): $(libR_la_OBJECTS) $(libR_la_DEPENDENCIES)
	$(DYLIB_LINK) $(LIBR_LDFLAGS) -o $@ $(libR_la_OBJECTS) `ls ../appl/*.o ../nmath/*.o ../unix/*.o  2>/dev/null|grep -v /ext-` $(libR_la_LIBADD)

install-lib-local: $(libR_la)
	@$(MAKE) rhome="$(abs_top_builddir)" install-lib

../appl/stamp-lo ../nmath/stamp-lo ../unix/stamp-lo:
	(cd $(@D); $(MAKE) $(@F))

$(srcdir)/gram.c: @MAINTAINER_MODE_TRUE@ $(srcdir)/gram.y
	@echo "re-making gram.c"
	$(YACC) $(YFLAGS) $(srcdir)/gram.y
	$(SHELL) $(top_srcdir)/tools/move-if-change y.tab.c $(srcdir)/gram.c

install: installdirs
	@$(MAKE) install-bin
	@if test -f $(libR_la); then $(MAKE) install-lib; fi
installdirs:
	@$(MKINSTALLDIRS) "$(DESTDIR)$(Rexecbindir2)"
	@$(MKINSTALLDIRS) "$(DESTDIR)$(Rexeclibdir)"
install-bin: installdirs
	@$(SHELL) $(top_srcdir)/tools/copy-if-change $(R_binary) "$(DESTDIR)$(Rexecbindir2)/R"
install-lib: installdirs
	@$(SHELL) $(top_srcdir)/tools/copy-if-change $(libR_la) "$(DESTDIR)$(Rexeclibdir)/$(libR_la)"
install-strip: installdirs
	@${INSTALL_PROGRAM} -s $(R_binary) "$(DESTDIR)$(Rexecbindir2)/R"
	@if test -f $(libR_la); then $(MAKE) install-lib; fi
	@if test -n "$(STRIP_LIBS)"; then \
	  if test -f $(libR_la); then $(STRIP_LIBS) "$(DESTDIR)$(Rexeclibdir)/$(libR_la)"; fi; \
	fi
uninstall:
	@rm -f "$(DESTDIR)$(Rexecbindir)/exec/$(R_ARCH)/R" "$(DESTDIR)$(Rexecbindir)/R.bin"
	@rm -f "$(DESTDIR)$(Rexeclibdir)/libR$(DYLIB_EXT)"

mostlyclean: clean
clean:
	@-rm -f $(top_builddir)/etc/R.exp
	@-rm -rf .libs _libs
	@-rm -f *core Makedeps *.d *.o *.lo *.la *$(DYLIB_EXT) \
	  $(R_binary)
distclean: clean
	@-rm -f Makefile
maintainer-clean: distclean
	@echo "This command is intended for maintainers to use; it"
	@echo "deletes files that may need special rules to rebuild"
	@-rm -f $(srcdir)/gram.c

tags: TAGS
TAGS: $(SOURCES) $(EXTRA_SOURCES_CXX) $(HEADERS)
	etags $(SOURCES) $(EXTRA_SOURCES_CXX) $(HEADERS)

## Unused targets
info dvi check:

distdir: $(DISTFILES)
	@for f in $(DISTFILES); do \
	  test -f $(distdir)/$${f} \
	    || ln $(srcdir)/$${f} $(distdir)/$${f} 2>/dev/null \
	    || cp -p $(srcdir)/$${f} $(distdir)/$${f}; \
	done
	@if test -f $(srcdir)/TAOCP1997.c ; then \
	  cp -p $(srcdir)/TAOCP1997.c $(distdir)/TAOCP1997.c; \
	fi

include $(DEPENDS)